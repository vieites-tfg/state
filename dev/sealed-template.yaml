---
# Source: zoo/charts/mongodb/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: zoo-dev-mongodb
  namespace: "dev"
  labels:
    app.kubernetes.io/instance: zoo-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.6
    helm.sh/chart: mongodb-15.0.0
    app.kubernetes.io/component: mongodb
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: zoo-dev
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: mongodb
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 27017
---
# Source: zoo/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zoo-dev-mongodb
  namespace: "dev"
  labels:
    app.kubernetes.io/instance: zoo-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.6
    helm.sh/chart: mongodb-15.0.0
secrets:
  - name: zoo-dev-mongodb
automountServiceAccountToken: false
---
# Source: zoo/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zoo-dev-mongodb-common-scripts
  namespace: "dev"
  labels:
    app.kubernetes.io/instance: zoo-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.6
    helm.sh/chart: mongodb-15.0.0
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    exec mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'if (!(db.hello().isWritablePrimary || db.hello().secondary)) { throw new Error("Not ready") }'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    readiness_test='db.isMaster().ismaster || db.isMaster().secondary'
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        readiness_test='db.hello().isWritablePrimary || db.hello().secondary'
    fi
    exec mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "if (!(${readiness_test})) { throw new Error(\"Not ready\") }"
  ping-mongodb.sh: |
    #!/bin/bash
    exec mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: zoo/charts/mongodb/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zoo-dev-mongodb-init-scripts
  namespace: "dev"
  labels:
    app.kubernetes.io/instance: zoo-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.6
    helm.sh/chart: mongodb-15.0.0
    app.kubernetes.io/component: mongodb
data:
  init-zoo.js: |-
    use("zoo");
    db.createCollection("animals");
    db.animals.insertMany([
      {
        name: "Leo",
        species: "Lion",
        birthday: "2018-03-15",
        genre: "male",
        diet: "Carnivore",
        condition: "Healthy",
        notes: "Alpha male in the pride."
      },
      {
        name: "Nala",
        species: "Lion",
        birthday: "2019-07-10",
        genre: "female",
        diet: "Carnivore",
        condition: "Healthy",
        notes: "Sister of the alpha male."
      },
      {
        name: "Zuri",
        species: "Giraffe",
        birthday: "2017-11-01",
        genre: "female",
        diet: "Herbivore",
        condition: "Healthy"
      },
      {
        name: "George",
        species: "Giraffe",
        birthday: "2016-06-22",
        genre: "male",
        diet: "Herbivore",
        condition: "Healthy"
      },
      {
        name: "Tisha",
        species: "Elephant",
        birthday: "2012-12-30",
        genre: "female",
        diet: "Herbivore",
        condition: "Healthy"
      },
      {
        name: "Dumbo",
        species: "Elephant",
        birthday: "2010-05-12",
        genre: "male",
        diet: "Herbivore",
        condition: "Injured",
        notes: "Recovering from minor foot injury."
      },
      {
        name: "Stripes",
        species: "Zebra",
        birthday: "2018-01-19",
        genre: "male",
        diet: "Herbivore",
        condition: "Healthy"
      },
      {
        name: "Zara",
        species: "Zebra",
        birthday: "2019-02-08",
        genre: "female",
        diet: "Herbivore",
        condition: "Healthy"
      },
      {
        name: "Miko",
        species: "Monkey",
        birthday: "2020-09-15",
        genre: "male",
        diet: "Omnivore",
        condition: "Healthy",
        notes: "Very playful with visitors."
      },
      {
        name: "Kali",
        species: "Monkey",
        birthday: "2021-03-03",
        genre: "female",
        diet: "Omnivore",
        condition: "Healthy"
      },
      {
        name: "Ray",
        species: "Parrot",
        birthday: "2019-04-10",
        genre: "male",
        diet: "Omnivore",
        condition: "Healthy",
        notes: "Knows a few words."
      },
      {
        name: "Rita",
        species: "Parrot",
        birthday: "2018-11-18",
        genre: "female",
        diet: "Omnivore",
        condition: "Healthy"
      },
      {
        name: "Cleo",
        species: "Tiger",
        birthday: "2015-07-02",
        genre: "female",
        diet: "Carnivore",
        condition: "Healthy"
      },
      {
        name: "Sheru",
        species: "Tiger",
        birthday: "2014-09-29",
        genre: "male",
        diet: "Carnivore",
        condition: "Healthy",
        notes: "Recently transferred from another zoo."
      },
      {
        name: "Benny",
        species: "Penguin",
        birthday: "2019-12-25",
        genre: "male",
        diet: "Carnivore",
        condition: "Healthy"
      },
      {
        name: "Penny",
        species: "Penguin",
        birthday: "2020-12-01",
        genre: "female",
        diet: "Carnivore",
        condition: "Healthy"
      },
      {
        name: "Lola",
        species: "Flamingo",
        birthday: "2017-08-08",
        genre: "female",
        diet: "Omnivore",
        condition: "Healthy"
      },
      {
        name: "Felipe",
        species: "Flamingo",
        birthday: "2016-02-14",
        genre: "male",
        diet: "Omnivore",
        condition: "Healthy"
      },
      {
        name: "Gaston",
        species: "Hippo",
        birthday: "2011-03-23",
        genre: "male",
        diet: "Herbivore",
        condition: "Ill",
        notes: "Under veterinary supervision."
      },
      {
        name: "Hilda",
        species: "Hippo",
        birthday: "2011-08-30",
        genre: "female",
        diet: "Herbivore",
        condition: "Healthy"
      }
    ]);
    print("'ZOO' DATABASE INITIALIZED WITH 20 ANIMALS IN 'ANIMALS' COLLECTION.");
---
# Source: zoo/charts/zoo-backend/templates/configMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zoo-dev-zoo-backend-config
data:
  NODE_ENV: development
  YARN_CACHE_FOLDER: .cache
---
# Source: zoo/charts/zoo-frontend/templates/configmap-js.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zoo-dev-zoo-frontend-config-js
data:
  config.js: |
    window.APP_CONFIG = {
      VITE_API_URL: "http://api-zoo-dev.example.com:8080",
    };
---
# Source: zoo/charts/zoo-frontend/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zoo-dev-zoo-frontend-config
data:
  VITE_API_URL: "http://zoo-backend-dev-backend:3000"
  NODE_ENV: development
  YARN_CACHE_FOLDER: .cache
---
# Source: zoo/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: zoo-dev-mongodb
  namespace: "dev"
  labels:
    app.kubernetes.io/instance: zoo-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.6
    helm.sh/chart: mongodb-15.0.0
    app.kubernetes.io/component: mongodb
  annotations:
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "5Gi"
  storageClassName: standard
---
# Source: zoo/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: zoo-dev-mongodb
  namespace: "dev"
  labels:
    app.kubernetes.io/instance: zoo-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.6
    helm.sh/chart: mongodb-15.0.0
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/instance: zoo-dev
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: mongodb
---
# Source: zoo/charts/zoo-backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zoo-dev-zoo-backend-svc
  labels:
    app.kubernetes.io/name: zoo-backend
    app.kubernetes.io/instance: zoo-dev
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app.kubernetes.io/name: zoo-backend
    app.kubernetes.io/instance: zoo-dev
---
# Source: zoo/charts/zoo-frontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zoo-dev-zoo-frontend-svc
  labels:
    app.kubernetes.io/name: zoo-frontend
    app.kubernetes.io/instance: zoo-dev
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    app.kubernetes.io/name: zoo-frontend
    app.kubernetes.io/instance: zoo-dev
---
# Source: zoo/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zoo-dev-mongodb
  namespace: "dev"
  labels:
    app.kubernetes.io/instance: zoo-dev
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.6
    helm.sh/chart: mongodb-15.0.0
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: zoo-dev
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: zoo-dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/version: 7.0.6
        helm.sh/chart: mongodb-15.0.0
        app.kubernetes.io/component: mongodb
    spec:
      automountServiceAccountToken: false
      serviceAccountName: zoo-dev-mongodb
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: zoo-dev
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      enableServiceLinks: true
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/os-shell:12-debian-12-r16
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              mkdir -p /bitnami/mongodb/
              chown 1001:1001 /bitnami/mongodb/
              find  /bitnami/mongodb/ -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | xargs -r chown -R 1001:1001
          securityContext:
            runAsUser: 0
            seLinuxOptions: {}
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: datadir
              mountPath: /bitnami/mongodb
      containers:
        - name: mongodb
          image: docker.io/xavidop/mongodb:7.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_EXTRA_USERNAMES
              value: "user"
            - name: MONGODB_EXTRA_DATABASES
              value: "zoo"
            - name: MONGODB_EXTRA_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: zoo-dev-mongodb
                  key: mongodb-passwords
            - name: MONGODB_ROOT_USER
              value: "carer"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: zoo-dev-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mongodb/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mongodb/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mongodb/logs
              subPath: app-logs-dir
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath:
            - name: common-scripts
              mountPath: /bitnami/scripts
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: common-scripts
          configMap:
            name: zoo-dev-mongodb-common-scripts
            defaultMode: 0550
        - name: custom-init-scripts
          configMap:
            name: zoo-dev-mongodb-init-scripts
        - name: datadir
          persistentVolumeClaim:
            claimName: zoo-dev-mongodb
---
# Source: zoo/charts/zoo-backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zoo-dev-backend
  labels:
    app.kubernetes.io/name: zoo-backend
    app.kubernetes.io/instance: zoo-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zoo-backend
      app.kubernetes.io/instance: zoo-dev
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zoo-backend
        app.kubernetes.io/instance: zoo-dev
    spec:
      imagePullSecrets:
        - name: ghcr-secret
      containers:
        - name: backend
          image: "ghcr.io/vieites-tfg/zoo-backend:0.0.1"
          imagePullPolicy:
          envFrom:
            - configMapRef:
                name: zoo-dev-zoo-backend-config
            - secretRef:
                name: zoo-dev-zoo-backend-secret
          ports:
            - containerPort: 3000
          resources: {}
---
# Source: zoo/charts/zoo-frontend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zoo-dev-frontend
  labels:
    app.kubernetes.io/name: zoo-frontend
    app.kubernetes.io/instance: zoo-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zoo-frontend
      app.kubernetes.io/instance: zoo-dev
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zoo-frontend
        app.kubernetes.io/instance: zoo-dev
    spec:
      imagePullSecrets:
        - name: ghcr-secret
      volumes:
        - name: frontend-config-volume
          configMap:
            name: zoo-dev-zoo-frontend-config-js
            items:
              - key: config.js
                path: config.js
      containers:
        - name: frontend
          tty: true
          stdin: true
          image: "ghcr.io/vieites-tfg/zoo-frontend:0.0.1"
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: zoo-dev-zoo-frontend-config
          ports:
            - containerPort: 80
          resources: {}
          volumeMounts:
            - name: frontend-config-volume
              mountPath: /usr/share/nginx/html/config.js
              subPath: config.js
              readOnly: true
---
# Source: zoo/charts/zoo-backend/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: zoo-dev-zoo-backend-ingress
spec:
  rules:
    - host: api-zoo-dev.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: zoo-dev-zoo-backend-svc
                port:
                  number: 3000
---
# Source: zoo/charts/zoo-frontend/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: zoo-dev-zoo-frontend-ingress
spec:
  rules:
    - host: zoo-dev.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: zoo-dev-zoo-frontend-svc
                port:
                  number: 80
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: zoo-dev-mongodb
  namespace: dev
spec:
  encryptedData:
    mongodb-passwords: AgCScsYJBXZrirU5qe7L90xL6V7Ygzhgc1gd2+yWtGoL8qPUdBNo/B8dezLJb+d1H9gnse4v8qHk7LmSJJy4DOZHokTF5jQ3OSKn1/kKlGC9PLMoQRWBoe237z+EU+H6tl/VJ7YxW80RR05lbnV8GP1FV3hMky9CJa/4Wrqe3vPH6cB5PhV2Osvumr34RdUqLInQuXD6cZV8Rx/av2eqLwhA9lQaf0I4xV+t3ezuUZyp8macjoe8f9y8YZmuBduLaeV44NmdOSCatfirVIQjySRZ6GFsost/wMaas+9GymDXOYYBHmrNYyaq6BGln+ra9f2ISI9z0ha8XCq3fpR+GaIbQw3CISMVvzNm8Vj5+oWhu+5Nx1cOCRuDwlDxzzbThh0bbUv/QmySgV9yNEOYURdLAyE80mdgXHpFOY/0JSMGCsgpGh+GhTwdE4LE+XdD7gIq79BY3nM6cf8Y+IUiT5HaTmfBXOzHLNll/vVVbZ1IrIIUFmlZWZeeYKTR/oGWmSZK7nvj3OwGrbA117x7akFR4QB6A9qf1yUxstojiV8UJPsb5I1s67uJPfzGeAgnzqAY0vhvgLaUChPJxPyNH87SINBGACg+7Mx1FfRfCFFu2WVEGnFOknBwfuVR+KsAE33RKNTe6DI0QYWAPntflMgq58kRo2iur8ZstMPNmWRPTVALpYSKwn3PTjXDFswX7qhP66Vxu/X1+f2Z
    mongodb-root-password: AgCKZ25tKMXi51jr3zFHfc8dBuk/gtxC4aqdHwSJqrRa9tsjpYKpiPr8uTuTw2lMLjJJ/uSW3oFqJ03wuEkJqmfVgZRuuUYxpBo/AIL71gYjqZ4HOe6gWcJ7NmD3PXhLhL4YEbGc3yE8zdi6AvMQNblSFt1Niul8F0Dw8JqpSkAXFxiIAbTDU0ULaeJ+S66/04kEwbuI4mtYFv5BnWWjizTNQeA0rH+A0WC3ikhJ/WX+dt2c+KVRP6yqGtf7UlBAqF19GBFPezp7KMUlI9e6ig9FAUtwLkvPTI+VI1HwSnJ/MGdDjvoNOsmZieL3TXpavXwDjIoyy+lGgB3+YtJfieosUSF5zD/ym1ft5nMsJ+6dwoZ/GRLHWfOqMLwKSQvf5zdL4Fag/FIUu4tlWksGQ8Ru6g34yZhemqv5A0e+Mo2Qptyry1PDclat2iJcqteho+MPK1wg/cEXx6hX18ShSPB8koZdvLtQIZ/Uv5ETwPWuPd92Ge4JLPQRI934bd8e/ouXaeCvO1LM+3LjycGYu7S4UAJl5y5xYngfzozHrUfBMfaoAlr5BvK45akbLq8SeHOUDNR/zT6G+RGSqbZl6xtILzR4AIlY2YoQ7KOeNqsOJQt9kUTikH8QpsP7Ro9SlK3/HpJfFzmzAckKj8NUBWY3dgLGCX3JmSadAS0/lLS65gKHTFM1Bj3XluJ/7Lj/GP4Ytvk5BcQTKDI=
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: mongodb
        app.kubernetes.io/instance: zoo-dev
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/version: 7.0.6
        helm.sh/chart: mongodb-15.0.0
      name: zoo-dev-mongodb
      namespace: dev
    type: Opaque
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: zoo-dev-zoo-backend-secret
  namespace: default
spec:
  encryptedData:
    MONGODB_URI: AgCx0+R8rmtxOS3VPm8APa1lj0tYzXLvBl39Aw3MKZVDb6/uO/JpFylO6h8m0ohPtTE7S1HMF5Md4UFoUGOj1aBLHOznPK5eD/IAGEkMzATWDNXsST1R9rF1ldF6B1/PSfJyLSpOsuhu/0JT/DtPYwWAGhfO9HAVkiQPCEJEeMtm4qzWzDHfl5nksy9mZDyBK/+P8deepoLRlZUl5YXt26bNnEW1Y8cdSVHrDnYE3HVmybrZhdgFu3VdHZeh6Nf5e7QNL4heExGDt567mJKlRzeRU9Xb2XdE1AkCD4frx675sRJ8F9ZPRRPnGCqw5Xjntv/Q3Gp9YEa+9y1kfu2KVTwjoYx9hXrw7UKrQwrwGfAAh13vDuN+SMM+SQBrvM0FCQ4Xt22QoKSqINu70IykMIuRmFcE3meYDJT5iHdUo2UBAw5HDd8uK9Qe7H5TVC7SMBxn/FBo3P1WxzpvQxMyUo+i6rHzy55ja22zQt9Wl6yosoFxuOn6vvxHDAfLEP4gZwhbeTypjMD6h12qs34XAZD1asmQPmAVVsdVSoQB2gSgmd+rmAXkHsWFi5+zOJktLh1Mym6SwZJrkDdHFwEud9zdJ8dZkYwqpq/YWB3fzI/0clJXYUZ/buihf85W4QMV2TG2kLy7pW4BtwLGCWBirEwB9izu84cCPNrPsbv6rZUTH9YaCavpP7lPwyX/KGLXcIcr1ltdXr9VwqQweQbQ7+c4hxYd564szOztqPznhbcd+5Z4mkNeI9oh9vMopBxd4Rdk88f6ClMbmabEbtp5Pa4QPngQYUA=
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: zoo-dev
      name: zoo-dev-zoo-backend-secret
      namespace: default
    type: Opaque
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: ghcr-secret
  namespace: default
spec:
  encryptedData:
    .dockerconfigjson: AgCwupqebSk71foaPSjy6sgntqVXL3UHewHGIrXSMtpVVDrqECLHThz4WBrqP5hg3ose8+l9Lxs+ta/IEqxCbzT9hb03fFMPpBqF9077bJnr3btcV1JjuI/bpltpCl0V4bHGIbUK48VfnoRfOEOxtxfs10TluUpEgsFhhXEL+KEucgBo83LOeL4gCD+2+HvRmqQu1jCRTwX5bLQbgl2TFWDZTLEEAb9V98kEEmo2C4Be2jVh+Mci7wEjkyNN5zHfboQZbLzttiyIyubIiQ9pfgUSe6RmnfwGNx/V8Sxo8RL95vkzAeWwcd+JFjxtPtQZh1SMHbEYCE70T1I+2/YAJCUxOo0qQ51AvolK/hEmPm+XO4iw56ooNYOfeCXmn/3dAJd5JWuN5AfihqWVutC0ybxV1zNswcKsnCYCBEdMqZxgKxWhpkzGUYEMMBxAM7upBF8Qo/ApehLlBu4OveMmnR9AM/QJC+gTx+FForrQ5UvmGUgMV5G9B2n1aRhlcOzOur461M06FTfuSsE3Pcf13rRsJjxBlzlD4aTvIHzpjBRS0WWjoZtY+aJXuyR3l6EaS/a1/sIpyy2fjccn4dho+Qw/cy4UHNMOQtPXnlaXow+YAVT0zE33saVNFebjaR9vR2RDU/cdwewXa/M6cSaOJzE5IC/D1JHlF1FdumstTRNfcHdFGm9cw0IxjLaLrCodNCV3cajZAvnfSnQuVXOrfD6p+FVbuvYu16T8GMKMhi1aKQjFSDGx/zcNUhaU0asS9hb9vfy/9vS2J56AzT61zRXmj90alC0DjJtfr+L2NIF2X3fh6z7iAq7ncULfOTKL29zmJVYxYrGFw84S5KwI8fD3KOY9EiKHnBHzi+GPNIcyCB/9uzqx+FwEdUEnH8WGL/8j7yQiL4ZpUWR97s/dMsfk5D9Ci5JM6MtYPD0hW2Jo0IOoob4yvWcvZ0eURVyh3kOopoiNYuh5DuXrKdk8WHJNxeObcb/aUA==
  template:
    metadata:
      creationTimestamp: null
      name: ghcr-secret
      namespace: default
    type: kubernetes.io/dockerconfigjson
